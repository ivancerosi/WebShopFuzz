package hr.algebra.api.webshop2024api;

import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;


/**
 * This file was automatically generated by EvoMaster on 2024-07-13T11:31:14.478+02:00[Europe/Belgrade]
 * <br>
 * The generated test suite contains 12 tests
 * <br>
 * Covered targets: 380
 * <br>
 * Used time: 1h 0m 0s
 * <br>
 * Needed budget for current results: 89%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {


    private static final SutHandler controller = new hr.algebra.api.webshop2024api.EvoMasterDriver();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
     * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
     */
    private static boolean ems = false;
    /**
     * sco - supported code oracle - checking that the response status code is among those supported according to the schema
     */
    private static boolean sco = false;
    /**
     * rso - response structure oracle - checking that the response objects match the responses defined in the schema
     */
    private static boolean rso = false;


    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
                .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
                .redirect(redirectConfig().followRedirects(false));
    }


    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }


    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CATEGORIES","SUBCATEGORIES","PRODUCTS","CART_ITEMS","ORDER_ITEMS","PRODUCT_IMAGE","IMAGE"));
        controller.resetStateOfSUT();
    }




    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/api-docs")
                .then()
                .statusCode(200);

        expectationHandler.expect(ems)
                /*
                 Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
                 This is somewhat unexpected, so the code below is likely to lead to a failed expectation
                */
                .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/products/664")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Async processing failed; nested exception is java.lang.NoSuchMethodError: java.util.Optional.isEmpty()Z"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name", "description", "price")));
    }


    @Test(timeout = 60000)
    public void test_2() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 123L)
                .d("NAME", "\"F2ssmQN83rtCm\"")
                .and().insertInto("SUBCATEGORIES", 122L)
                .d("NAME", "\"lLx2iSj\"")
                .r("CATEGORY_ID", 123L)
                .and().insertInto("PRODUCTS", 121L)
                .d("NAME", "\"syJ1tV\"")
                .d("PRICE", "0.77228945")
                .r("SUBCATEGORY_ID", 122L)
                .and().insertInto("IMAGE", 120L)
                .d("IMAGE_URL", "\"irNIlOuA4o\"")
                .and().insertInto("PRODUCT_IMAGE", 119L)
                .r("IMAGE_ID", 120L)
                .r("PRODUCT_ID", 121L)
                .and().insertInto("CATEGORIES", 128L)
                .d("NAME", "\"_EM_129087_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 127L)
                .d("NAME", "\"a6I0FaeC8VfBnJ5Q\"")
                .r("CATEGORY_ID", 123L)
                .and().insertInto("PRODUCTS", 126L)
                .d("NAME", "\"1iBJkzyI\"")
                .d("PRICE", "0.4662646")
                .r("SUBCATEGORY_ID", 127L)
                .and().insertInto("IMAGE", 125L)
                .d("IMAGE_URL", "\"_EM_129088_XYZ_\"")
                .and().insertInto("PRODUCT_IMAGE", 124L)
                .r("IMAGE_ID", 120L)
                .r("PRODUCT_ID", 126L)
                .and().insertInto("CATEGORIES", 133L)
                .d("NAME", "\"17NV80JqE\"")
                .and().insertInto("SUBCATEGORIES", 132L)
                .d("NAME", "\"OEVG3qZeVAsw\"")
                .r("CATEGORY_ID", 133L)
                .and().insertInto("PRODUCTS", 131L)
                .d("NAME", "\"4nusdL1lrQJ0e\"")
                .d("PRICE", "0.4325296")
                .r("SUBCATEGORY_ID", 132L)
                .and().insertInto("IMAGE", 130L)
                .d("IMAGE_URL", "\"D74LLOP5\"")
                .and().insertInto("PRODUCT_IMAGE", 129L)
                .r("IMAGE_ID", 125L)
                .r("PRODUCT_ID", 121L)
                .and().insertInto("CATEGORIES", 138L)
                .d("NAME", "\"_EM_129089_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 137L)
                .d("NAME", "\"E_f0SjehfZX\"")
                .r("CATEGORY_ID", 123L)
                .and().insertInto("PRODUCTS", 136L)
                .d("NAME", "\"vZOq3\"")
                .d("PRICE", "0.66233337")
                .r("SUBCATEGORY_ID", 127L)
                .and().insertInto("IMAGE", 135L)
                .d("IMAGE_URL", "\"8d\"")
                .and().insertInto("PRODUCT_IMAGE", 134L)
                .r("IMAGE_ID", 120L)
                .r("PRODUCT_ID", 121L)
                .and().insertInto("CATEGORIES", 143L)
                .d("NAME", "\"FxCHJ\"")
                .and().insertInto("SUBCATEGORIES", 142L)
                .d("NAME", "\"_EM_129090_XYZ_\"")
                .r("CATEGORY_ID", 143L)
                .and().insertInto("PRODUCTS", 141L)
                .d("NAME", "\"_EM_129091_XYZ_\"")
                .d("PRICE", "0.603854")
                .r("SUBCATEGORY_ID", 132L)
                .and().insertInto("IMAGE", 140L)
                .d("IMAGE_URL", "\"_EM_129092_XYZ_\"")
                .and().insertInto("PRODUCT_IMAGE", 139L)
                .r("IMAGE_ID", 120L)
                .r("PRODUCT_ID", 131L)
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);

        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("x-requested-with", "_EM_129086_XYZ_")
                .delete(baseUrlOfSut + "/webShopApi/productImages/2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Async processing failed; nested exception is java.lang.NoSuchMethodError: java.util.Optional.isEmpty()Z"))
                .body("'path'", containsString(""));

    }


    @Test(timeout = 60000)
    public void test_3() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 57678L)
                .d("NAME", "\"X5kKfNb\"")
                .and().insertInto("SUBCATEGORIES", 57677L)
                .d("NAME", "\"0ubManx_\"")
                .r("CATEGORY_ID", 57678L)
                .and().insertInto("PRODUCTS", 57676L)
                .d("NAME", "\"znFr0FQ_54\"")
                .d("PRICE", "0.91229314")
                .r("SUBCATEGORY_ID", 57677L)
                .and().insertInto("IMAGE", 57675L)
                .d("IMAGE_URL", "\"OA\"")
                .and().insertInto("PRODUCT_IMAGE", 57674L)
                .r("IMAGE_ID", 57675L)
                .r("PRODUCT_ID", 57676L)
                .and().insertInto("CATEGORIES", 57683L)
                .d("NAME", "\"Vj3L1WLJ\"")
                .and().insertInto("SUBCATEGORIES", 57682L)
                .d("NAME", "\"ULZAzZD7Qj2w\"")
                .r("CATEGORY_ID", 57683L)
                .and().insertInto("PRODUCTS", 57681L)
                .d("NAME", "\"MfbevJ\"")
                .d("PRICE", "0.0")
                .r("SUBCATEGORY_ID", 57682L)
                .and().insertInto("IMAGE", 57680L)
                .d("IMAGE_URL", "\"hqoIBdBE1Cnopz_\"")
                .and().insertInto("PRODUCT_IMAGE", 57679L)
                .r("IMAGE_ID", 57680L)
                .r("PRODUCT_ID", 57676L)
                .and().insertInto("CATEGORIES", 57688L)
                .d("NAME", "\"uumySN6oRmU\"")
                .and().insertInto("SUBCATEGORIES", 57687L)
                .d("NAME", "\"_EM_222737_XYZ_\"")
                .r("CATEGORY_ID", 57683L)
                .and().insertInto("PRODUCTS", 57686L)
                .d("NAME", "\"GtvsMti0UUUKdFU8\"")
                .d("PRICE", "0.23196907")
                .r("SUBCATEGORY_ID", 57682L)
                .and().insertInto("IMAGE", 57685L)
                .d("IMAGE_URL", "\"RAFPr\"")
                .and().insertInto("PRODUCT_IMAGE", 57684L)
                .r("IMAGE_ID", 57680L)
                .r("PRODUCT_ID", 57686L)
                .and().insertInto("CATEGORIES", 57693L)
                .d("NAME", "\"ifsHpzAJcZj\"")
                .and().insertInto("SUBCATEGORIES", 57692L)
                .d("NAME", "\"qglcGKJ9Ai6XVdO\"")
                .r("CATEGORY_ID", 57693L)
                .and().insertInto("PRODUCTS", 57691L)
                .d("NAME", "\"jK\"")
                .d("PRICE", "0.052815583")
                .r("SUBCATEGORY_ID", 57682L)
                .and().insertInto("IMAGE", 57690L)
                .d("IMAGE_URL", "\"A1oW2FNaifsICR\"")
                .and().insertInto("PRODUCT_IMAGE", 57689L)
                .r("IMAGE_ID", 57690L)
                .r("PRODUCT_ID", 57686L)
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "f0")
                .get(baseUrlOfSut + "/webShopApi/productImages/1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Async processing failed; nested exception is java.lang.NoSuchMethodError: java.util.Optional.isEmpty()Z"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }


    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " +
                        " \"product\": { " +
                        " \"productId\": 613, " +
                        " \"name\": \"_EM_50_XYZ_\", " +
                        " \"description\": \"_EM_51_XYZ_\", " +
                        " \"price\": 0.9249801304108797, " +
                        " \"subcategory\": { " +
                        " \"name\": \"_EM_52_XYZ_\" " +
                        " } " +
                        " }, " +
                        " \"image\": { " +
                        " \"imageId\": 935, " +
                        " \"imageUrl\": \"_EM_53_XYZ_\" " +
                        " } " +
                        " } ")
                .put(baseUrlOfSut + "/webShopApi/productImages/86")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Async processing failed; nested exception is java.lang.NoSuchMethodError: java.util.Optional.isEmpty()Z"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }


    @Test(timeout = 60000)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 123L)
                .d("NAME", "\"F2ssmQN83rtCm\"")
                .and().insertInto("SUBCATEGORIES", 122L)
                .d("NAME", "\"lLx2iSj\"")
                .r("CATEGORY_ID", 123L)
                .and().insertInto("PRODUCTS", 121L)
                .d("NAME", "\"syJ1tV\"")
                .d("PRICE", "0.77228945")
                .r("SUBCATEGORY_ID", 122L)
                .and().insertInto("IMAGE", 120L)
                .d("IMAGE_URL", "\"irNIlOuA4o\"")
                .and().insertInto("PRODUCT_IMAGE", 119L)
                .r("IMAGE_ID", 120L)
                .r("PRODUCT_ID", 121L)
                .and().insertInto("CATEGORIES", 128L)
                .d("NAME", "\"_EM_129087_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 127L)
                .d("NAME", "\"a6I0FaeC8VfBnJ5Q\"")
                .r("CATEGORY_ID", 123L)
                .and().insertInto("PRODUCTS", 126L)
                .d("NAME", "\"1iBJkzyI\"")
                .d("PRICE", "0.4662646")
                .r("SUBCATEGORY_ID", 127L)
                .and().insertInto("IMAGE", 125L)
                .d("IMAGE_URL", "\"_EM_129088_XYZ_\"")
                .and().insertInto("PRODUCT_IMAGE", 124L)
                .r("IMAGE_ID", 120L)
                .r("PRODUCT_ID", 126L)
                .and().insertInto("CATEGORIES", 133L)
                .d("NAME", "\"17NV80JqE\"")
                .and().insertInto("SUBCATEGORIES", 132L)
                .d("NAME", "\"OEVG3qZeVAsw\"")
                .r("CATEGORY_ID", 133L)
                .and().insertInto("PRODUCTS", 131L)
                .d("NAME", "\"4nusdL1lrQJ0e\"")
                .d("PRICE", "0.4325296")
                .r("SUBCATEGORY_ID", 132L)
                .and().insertInto("IMAGE", 130L)
                .d("IMAGE_URL", "\"D74LLOP5\"")
                .and().insertInto("PRODUCT_IMAGE", 129L)
                .r("IMAGE_ID", 125L)
                .r("PRODUCT_ID", 121L)
                .and().insertInto("CATEGORIES", 138L)
                .d("NAME", "\"_EM_129089_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 137L)
                .d("NAME", "\"E_f0SjehfZX\"")
                .r("CATEGORY_ID", 123L)
                .and().insertInto("PRODUCTS", 136L)
                .d("NAME", "\"vZOq3\"")
                .d("PRICE", "0.66233337")
                .r("SUBCATEGORY_ID", 127L)
                .and().insertInto("IMAGE", 135L)
                .d("IMAGE_URL", "\"8d\"")
                .and().insertInto("PRODUCT_IMAGE", 134L)
                .r("IMAGE_ID", 120L)
                .r("PRODUCT_ID", 121L)
                .and().insertInto("CATEGORIES", 143L)
                .d("NAME", "\"FxCHJ\"")
                .and().insertInto("SUBCATEGORIES", 142L)
                .d("NAME", "\"_EM_129090_XYZ_\"")
                .r("CATEGORY_ID", 143L)
                .and().insertInto("PRODUCTS", 141L)
                .d("NAME", "\"_EM_129091_XYZ_\"")
                .d("PRICE", "0.603854")
                .r("SUBCATEGORY_ID", 132L)
                .and().insertInto("IMAGE", 140L)
                .d("IMAGE_URL", "\"_EM_129092_XYZ_\"")
                .and().insertInto("PRODUCT_IMAGE", 139L)
                .r("IMAGE_ID", 120L)
                .r("PRODUCT_ID", 131L)
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " +
                        " \"productImageId\": 2 " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/productImages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }


    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " +
                        " \"image\": { " +
                        " \"imageUrl\": \"_EM_78_XYZ_\" " +
                        " } " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/productImages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("org.hibernate.TransientPropertyValueException: Not-null property references a transient value - transient instance must be saved before current operation : hr.algebra.dal.webshop2024dal.Entity.ProductImage.image -> hr.algebra.dal.webshop2024dal.Entity.Image; nested exception is java.lang.IllegalStateException: org.hibernate.TransientPropertyValueException: Not-null property references a transient value - transient instance must be saved before current operation : hr.algebra.dal.webshop2024dal.Entity.ProductImage.image -> hr.algebra.dal.webshop2024dal.Entity.Image"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }


    @Test(timeout = 60000)
    public void test_7() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 264L)
                .d("NAME", "\"Oof2E\"")
                .and().insertInto("SUBCATEGORIES", 263L)
                .d("NAME", "\"v\"")
                .r("CATEGORY_ID", 264L)
                .and().insertInto("PRODUCTS", 262L)
                .d("NAME", "\"AAyQ4\"")
                .d("PRICE", "0.18405494")
                .r("SUBCATEGORY_ID", 263L)
                .and().insertInto("IMAGE", 261L)
                .d("IMAGE_URL", "\"MK1KCU4\"")
                .and().insertInto("PRODUCT_IMAGE", 260L)
                .r("IMAGE_ID", 261L)
                .r("PRODUCT_ID", 262L)
                .and().insertInto("CATEGORIES", 269L)
                .d("NAME", "\"2EJ4miVgnX\"")
                .and().insertInto("SUBCATEGORIES", 268L)
                .d("NAME", "\"A5aQ\"")
                .r("CATEGORY_ID", 264L)
                .and().insertInto("PRODUCTS", 267L)
                .d("NAME", "\"Uf5NtEj08y\"")
                .d("PRICE", "0.11010449")
                .r("SUBCATEGORY_ID", 263L)
                .and().insertInto("IMAGE", 266L)
                .d("IMAGE_URL", "\"RG2bwCVKm\"")
                .and().insertInto("PRODUCT_IMAGE", 265L)
                .r("IMAGE_ID", 261L)
                .r("PRODUCT_ID", 262L)
                .and().insertInto("CATEGORIES", 274L)
                .d("NAME", "\"wndzj5q68Cic7u\"")
                .and().insertInto("SUBCATEGORIES", 273L)
                .d("NAME", "\"WTi9a8KGus\"")
                .r("CATEGORY_ID", 264L)
                .and().insertInto("PRODUCTS", 272L)
                .d("NAME", "\"c26no\"")
                .d("PRICE", "0.46733034")
                .r("SUBCATEGORY_ID", 268L)
                .and().insertInto("IMAGE", 271L)
                .d("IMAGE_URL", "\"1M\"")
                .and().insertInto("PRODUCT_IMAGE", 270L)
                .r("IMAGE_ID", 266L)
                .r("PRODUCT_ID", 272L)
                .and().insertInto("CATEGORIES", 279L)
                .d("NAME", "\"FjA\"")
                .and().insertInto("SUBCATEGORIES", 278L)
                .d("NAME", "\"554YJaaFcXg\"")
                .r("CATEGORY_ID", 269L)
                .and().insertInto("PRODUCTS", 277L)
                .d("NAME", "\"0jEV\"")
                .d("PRICE", "0.4344325")
                .r("SUBCATEGORY_ID", 278L)
                .and().insertInto("IMAGE", 276L)
                .d("IMAGE_URL", "\"dRI_1M0\"")
                .and().insertInto("PRODUCT_IMAGE", 275L)
                .r("IMAGE_ID", 266L)
                .r("PRODUCT_ID", 277L)
                .and().insertInto("CATEGORIES", 284L)
                .d("NAME", "\"lQ6ztmlDx\"")
                .and().insertInto("SUBCATEGORIES", 283L)
                .d("NAME", "\"nlqNE9gyf\"")
                .r("CATEGORY_ID", 279L)
                .and().insertInto("PRODUCTS", 282L)
                .d("NAME", "\"1yz8Ly_fTB6fU4\"")
                .d("PRICE", "0.72648835")
                .r("SUBCATEGORY_ID", 268L)
                .and().insertInto("IMAGE", 281L)
                .d("IMAGE_URL", "\"1YHEvNmPg\"")
                .and().insertInto("PRODUCT_IMAGE", 280L)
                .r("IMAGE_ID", 261L)
                .r("PRODUCT_ID", 272L)
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);

        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/webShopApi/products/allProducts?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'productId'", numberMatches(1.0))
                .body("[0].'name'", containsString("AAyQ4"))
                .body("[0].'description'", nullValue())
                .body("[0].'price'", numberMatches(0.18))
                .body("[0].'subcategory'.'subcategoryId'", numberMatches(1.0))
                .body("[0].'subcategory'.'name'", containsString("v"))
                .body("[0].'subcategory'.'category'.'categoryId'", numberMatches(1.0))
                .body("[0].'subcategory'.'category'.'name'", containsString("Oof2E"))
                .body("[1].'productId'", numberMatches(2.0))
                .body("[1].'name'", containsString("Uf5NtEj08y"))
                .body("[1].'description'", nullValue())
                .body("[1].'price'", numberMatches(0.11))
                .body("[1].'subcategory'.'subcategoryId'", numberMatches(1.0))
                .body("[1].'subcategory'.'name'", containsString("v"))
                .body("[1].'subcategory'.'category'.'categoryId'", numberMatches(1.0))
                .body("[1].'subcategory'.'category'.'name'", containsString("Oof2E"))
                .body("[2].'productId'", numberMatches(3.0))
                .body("[2].'name'", containsString("c26no"))
                .body("[2].'description'", nullValue())
                .body("[2].'price'", numberMatches(0.47))
                .body("[2].'subcategory'.'subcategoryId'", numberMatches(2.0))
                .body("[2].'subcategory'.'name'", containsString("A5aQ"))
                .body("[2].'subcategory'.'category'.'categoryId'", numberMatches(1.0))
                .body("[2].'subcategory'.'category'.'name'", containsString("Oof2E"))
        ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations

    }


    @Test(timeout = 60000)
    public void test_8() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 83L)
                .d("NAME", "\"xkhjy6YTmk\"")
                .and().insertInto("SUBCATEGORIES", 82L)
                .d("NAME", "\"_EM_223_XYZ_\"")
                .r("CATEGORY_ID", 83L)
                .and().insertInto("PRODUCTS", 81L)
                .d("NAME", "\"RxwbYJCjUi\"")
                .d("PRICE", "0.44666138")
                .r("SUBCATEGORY_ID", 82L)
                .and().insertInto("IMAGE", 80L)
                .d("IMAGE_URL", "\"_EM_224_XYZ_\"")
                .and().insertInto("PRODUCT_IMAGE", 79L)
                .r("IMAGE_ID", 80L)
                .r("PRODUCT_ID", 81L)
                .and().insertInto("CATEGORIES", 88L)
                .d("NAME", "\"_EM_225_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 87L)
                .d("NAME", "\"_EM_226_XYZ_\"")
                .r("CATEGORY_ID", 83L)
                .and().insertInto("PRODUCTS", 86L)
                .d("NAME", "\"_EM_227_XYZ_\"")
                .d("PRICE", "0.4564059")
                .r("SUBCATEGORY_ID", 87L)
                .and().insertInto("IMAGE", 85L)
                .d("IMAGE_URL", "\"_EM_228_XYZ_\"")
                .and().insertInto("PRODUCT_IMAGE", 84L)
                .r("IMAGE_ID", 85L)
                .r("PRODUCT_ID", 81L)
                .and().insertInto("CATEGORIES", 93L)
                .d("NAME", "\"_EM_229_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 92L)
                .d("NAME", "\"_EM_230_XYZ_\"")
                .r("CATEGORY_ID", 88L)
                .and().insertInto("PRODUCTS", 91L)
                .d("NAME", "\"_EM_231_XYZ_\"")
                .d("PRICE", "1.3085748")
                .r("SUBCATEGORY_ID", 87L)
                .and().insertInto("IMAGE", 90L)
                .d("IMAGE_URL", "\"\"")
                .and().insertInto("PRODUCT_IMAGE", 89L)
                .r("IMAGE_ID", 85L)
                .r("PRODUCT_ID", 81L)
                .and().insertInto("CATEGORIES", 98L)
                .d("NAME", "\"_EM_232_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 97L)
                .d("NAME", "\"_v_ciFuh97M6\"")
                .r("CATEGORY_ID", 93L)
                .and().insertInto("PRODUCTS", 96L)
                .d("NAME", "\"_EM_233_XYZ_\"")
                .d("PRICE", "0.0")
                .r("SUBCATEGORY_ID", 82L)
                .and().insertInto("IMAGE", 95L)
                .d("IMAGE_URL", "\"GJBujchamRDC43\"")
                .and().insertInto("PRODUCT_IMAGE", 94L)
                .r("IMAGE_ID", 85L)
                .r("PRODUCT_ID", 96L)
                .and().insertInto("CATEGORIES", 103L)
                .d("NAME", "\"d7SzyT\"")
                .and().insertInto("SUBCATEGORIES", 102L)
                .d("NAME", "\"_EM_234_XYZ_\"")
                .r("CATEGORY_ID", 98L)
                .and().insertInto("PRODUCTS", 101L)
                .d("NAME", "\"_EM_235_XYZ_\"")
                .d("PRICE", "0.31073663")
                .r("SUBCATEGORY_ID", 92L)
                .and().insertInto("IMAGE", 100L)
                .d("IMAGE_URL", "\"_EM_236_XYZ_\"")
                .and().insertInto("PRODUCT_IMAGE", 99L)
                .r("IMAGE_ID", 80L)
                .r("PRODUCT_ID", 96L)
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " +
                        " \"productImageId\": 524381, " +
                        " \"product\": { " +
                        " \"productId\": 22, " +
                        " \"name\": \"2ATFiKV4Q\", " +
                        " \"description\": \"AXYbpIxGOWT4\", " +
                        " \"price\": 0.6762144645376713 " +
                        " }, " +
                        " \"image\": { " +
                        " \"imageId\": -1752634583, " +
                        " \"imageUrl\": \"DCBs\" " +
                        " } " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/productImages?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Unable to find hr.algebra.dal.webshop2024dal.Entity.Image with id -1752634583; nested exception is javax.persistence.EntityNotFoundException: Unable to find hr.algebra.dal.webshop2024dal.Entity.Image with id -1752634583"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }


    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " +
                        " \"productImageId\": 767, " +
                        " \"product\": { " +
                        " \"productId\": 898, " +
                        " \"name\": \"nS3uxpz\", " +
                        " \"description\": \"_EM_36_XYZ_\", " +
                        " \"price\": 0.38978018800129277, " +
                        " \"subcategory\": { " +
                        " \"name\": \"fKkRMaTxyq74\" " +
                        " } " +
                        " } " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/productImages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Unable to find hr.algebra.dal.webshop2024dal.Entity.Product with id 898; nested exception is javax.persistence.EntityNotFoundException: Unable to find hr.algebra.dal.webshop2024dal.Entity.Product with id 898"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }


    @Test(timeout = 60000)
    public void test_10() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 108L)
                .d("NAME", "\"\"")
                .and().insertInto("SUBCATEGORIES", 107L)
                .d("NAME", "\"0s3HDjhVz_uoroB\"")
                .r("CATEGORY_ID", 108L)
                .and().insertInto("PRODUCTS", 106L)
                .d("NAME", "\"I_2ki7wPGwMDZ\"")
                .d("PRICE", "0.6868605")
                .r("SUBCATEGORY_ID", 107L)
                .and().insertInto("IMAGE", 105L)
                .d("IMAGE_URL", "\"\"")
                .and().insertInto("PRODUCT_IMAGE", 104L)
                .r("IMAGE_ID", 105L)
                .r("PRODUCT_ID", 106L)
                .and().insertInto("CATEGORIES", 113L)
                .d("NAME", "\"TmXHN9QGp\"")
                .and().insertInto("SUBCATEGORIES", 112L)
                .d("NAME", "\"sP\"")
                .r("CATEGORY_ID", 108L)
                .and().insertInto("PRODUCTS", 111L)
                .d("NAME", "\"sOCdZFMmRnEmMp\"")
                .d("PRICE", "0.31944743")
                .r("SUBCATEGORY_ID", 112L)
                .and().insertInto("IMAGE", 110L)
                .d("IMAGE_URL", "\"\"")
                .and().insertInto("PRODUCT_IMAGE", 109L)
                .r("IMAGE_ID", 110L)
                .r("PRODUCT_ID", 106L)
                .and().insertInto("CATEGORIES", 118L)
                .d("NAME", "\"i4pQda\"")
                .and().insertInto("SUBCATEGORIES", 117L)
                .d("NAME", "\"sG8BIg\"")
                .r("CATEGORY_ID", 118L)
                .and().insertInto("PRODUCTS", 116L)
                .d("NAME", "\"3CoWmj97\"")
                .d("PRICE", "0.7003847")
                .r("SUBCATEGORY_ID", 117L)
                .and().insertInto("IMAGE", 115L)
                .d("IMAGE_URL", "\"u\"")
                .and().insertInto("PRODUCT_IMAGE", 114L)
                .r("IMAGE_ID", 110L)
                .r("PRODUCT_ID", 116L)
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);

        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/productImages/allProductImages?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'productImageId'", numberMatches(1.0))
                .body("[0].'product'.'productId'", numberMatches(1.0))
                .body("[0].'product'.'name'", containsString("I_2ki7wPGwMDZ"))
                .body("[0].'product'.'description'", nullValue())
                .body("[0].'product'.'price'", numberMatches(0.69))
                .body("[0].'product'.'subcategory'.'subcategoryId'", numberMatches(1.0))
                .body("[0].'product'.'subcategory'.'name'", containsString("0s3HDjhVz_uoroB"))
                .body("[0].'product'.'subcategory'.'category'.'categoryId'", numberMatches(1.0))
                .body("[0].'product'.'subcategory'.'category'.'name'", containsString(""))
                .body("[0].'image'.'imageId'", numberMatches(1.0))
                .body("[0].'image'.'imageUrl'", containsString(""))
                .body("[1].'productImageId'", numberMatches(2.0))
                .body("[1].'product'.'productId'", numberMatches(1.0))
                .body("[1].'product'.'name'", containsString("I_2ki7wPGwMDZ"))
                .body("[1].'product'.'description'", nullValue())
                .body("[1].'product'.'price'", numberMatches(0.69))
                .body("[1].'product'.'subcategory'.'subcategoryId'", numberMatches(1.0))
                .body("[1].'product'.'subcategory'.'name'", containsString("0s3HDjhVz_uoroB"))
                .body("[1].'product'.'subcategory'.'category'.'categoryId'", numberMatches(1.0))
                .body("[1].'product'.'subcategory'.'category'.'name'", containsString(""))
                .body("[1].'image'.'imageId'", numberMatches(2.0))
                .body("[1].'image'.'imageUrl'", containsString(""))
                .body("[2].'productImageId'", numberMatches(3.0))
                .body("[2].'product'.'productId'", numberMatches(3.0))
                .body("[2].'product'.'name'", containsString("3CoWmj97"))
                .body("[2].'product'.'description'", nullValue())
                .body("[2].'product'.'price'", numberMatches(0.7))
                .body("[2].'product'.'subcategory'.'subcategoryId'", numberMatches(3.0))
                .body("[2].'product'.'subcategory'.'name'", containsString("sG8BIg"))
                .body("[2].'product'.'subcategory'.'category'.'categoryId'", numberMatches(3.0))
                .body("[2].'product'.'subcategory'.'category'.'name'", containsString("i4pQda"))
                .body("[2].'image'.'imageId'", numberMatches(2.0))
                .body("[2].'image'.'imageUrl'", containsString(""));

    }


    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " +
                        " \"productImageId\": 442, " +
                        " \"product\": { " +
                        " \"productId\": 795, " +
                        " \"name\": \"_EM_79_XYZ_\", " +
                        " \"description\": \"1NHGRX_zT36O\", " +
                        " \"price\": 0.5431222115944523, " +
                        " \"subcategory\": { " +
                        " \"name\": \"_EM_80_XYZ_\", " +
                        " \"category\": { " +
                        " \"categoryId\": 903, " +
                        " \"name\": \"_EM_81_XYZ_\" " +
                        " } " +
                        " } " +
                        " }, " +
                        " \"image\": { " +
                        " \"imageUrl\": \"_EM_82_XYZ_\" " +
                        " } " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/productImages?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Unable to find hr.algebra.dal.webshop2024dal.Entity.Product with id 795; nested exception is javax.persistence.EntityNotFoundException: Unable to find hr.algebra.dal.webshop2024dal.Entity.Product with id 795"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }


}
