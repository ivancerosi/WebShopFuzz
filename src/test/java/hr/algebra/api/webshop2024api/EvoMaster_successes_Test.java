package hr.algebra.api.webshop2024api;
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-07-13T13:56:30.390+02:00[Europe/Belgrade]
 * <br>
 * The generated test suite contains 25 tests
 * <br>
 * Covered targets: 71
 * <br>
 * Used time: 1h 0m 0s
 * <br>
 * Needed budget for current results: 92%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {


    private static final SutHandler controller = new hr.algebra.api.webshop2024api.EvoMasterDriver();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
     * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
     */
    private static boolean ems = false;
    /**
     * sco - supported code oracle - checking that the response status code is among those supported according to the schema
     */
    private static boolean sco = false;
    /**
     * rso - response structure oracle - checking that the response objects match the responses defined in the schema
     */
    private static boolean rso = false;


    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
                .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
                .redirect(redirectConfig().followRedirects(false));
    }


    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }


    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("subcategories","PRODUCTS","CART_ITEMS","ORDER_ITEMS","PRODUCT_IMAGE","categories","SHOPPING_CART"));
        controller.resetStateOfSUT();
    }




    @Test(timeout = 60000)
    public void test_0() throws Exception {

        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/productImages/allProductImages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));

    }


    @Test(timeout = 60000)
    public void test_1() throws Exception {

        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_31_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/cartItems/allCartItems")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));

    }


    @Test(timeout = 60000)
    public void test_2() throws Exception {

        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/webShopApi/subcategories/156?EMextraParam123=_EM_10_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Subcategory id not found - 156"))
                .body("'path'", containsString(""));

    }


    @Test(timeout = 60000)
    public void test_3() throws Exception {

        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_15_XYZ_")
                .delete(baseUrlOfSut + "/webShopApi/products/-1182657997")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Product id not found - -1182657997"))
                .body("'path'", containsString(""));

    }


    @Test(timeout = 60000)
    public void test_4() throws Exception {

        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/webShopApi/productImages/928")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Product image id not found - 928"))
                .body("'path'", containsString(""));

    }


    @Test(timeout = 60000)
    public void test_5() throws Exception {

        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/webShopApi/categories/306?EMextraParam123=_EM_20_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Category id not found - 306"))
                .body("'path'", containsString(""));

    }


    @Test(timeout = 60000)
    public void test_6() throws Exception {

        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_23_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/subcategories/allSubcategories?EMextraParam123=_EM_22_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));

    }


    @Test(timeout = 60000)
    public void test_7() throws Exception {

        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_25_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/products/allProducts")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));

    }


    @Test(timeout = 60000)
    public void test_8() throws Exception {

        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/categories/allCategories?EMextraParam123=_EM_28_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));

    }


    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByUsername/_EM_0_XYZ_?EMextraParam123=_EM_1_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Shopping cart not found for user: _EM_0_XYZ_"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("quantity")));
    }


    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_66_XYZ_")
                .contentType("application/json")
                .body(" { " +
                        " \"image\": { " +
                        " \"imageId\": 368, " +
                        " \"imageUrl\": \"_EM_64_XYZ_\" " +
                        " } " +
                        " } ")
                .put(baseUrlOfSut + "/webShopApi/productImages/366")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Product image id not found - 366"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }


    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " +
                        " \"image\": { " +
                        " \"imageUrl\": \"_EM_45_XYZ_\" " +
                        " } " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/productImages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("org.hibernate.TransientPropertyValueException: Not-null property references a transient value - transient instance must be saved before current operation : hr.algebra.dal.webshop2024dal.Entity.ProductImage.image -> hr.algebra.dal.webshop2024dal.Entity.Image; nested exception is java.lang.IllegalStateException: org.hibernate.TransientPropertyValueException: Not-null property references a transient value - transient instance must be saved before current operation : hr.algebra.dal.webshop2024dal.Entity.ProductImage.image -> hr.algebra.dal.webshop2024dal.Entity.Image"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }


    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByShoppingCartId/244?EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Shopping cart id not found - 244"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("quantity")));
    }


    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findBySession/_EM_5_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Shopping cart not found for session: _EM_5_XYZ_"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("quantity")));
    }


    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/subcategories/482")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Subcategory id not found - 482"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name")));
    }


    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/products/89")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Product id not found - 89"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name", "description", "price")));
    }


    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/productImages/112?EMextraParam123=_EM_16_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Product image id not found - 112"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }


    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/webShopApi/categories/967")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Category id not found - 967"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name")));
    }


    @Test(timeout = 60000)
    public void test_18() throws Exception {

        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " +
                        " \"categoryId\": -1825161092, " +
                        " \"name\": \"_EM_47_XYZ_\" " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/categories?EMextraParam123=_EM_48_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'categoryId'", numberMatches(1.0))
                .body("'name'", containsString("_EM_47_XYZ_"));

    }


    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/api-docs")
                .then()
                .statusCode(200);

        expectationHandler.expect(ems)
                /*
                 Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
                 This is somewhat unexpected, so the code below is likely to lead to a failed expectation
                */
                .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " +
                        " \"subcategoryId\": 637, " +
                        " \"name\": \"_EM_32_XYZ_\" " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/subcategories?EMextraParam123=_EM_34_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name")));
    }


    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_41_XYZ_")
                .contentType("application/json")
                .body(" { " +
                        " \"productId\": 723, " +
                        " \"name\": \"_EM_36_XYZ_\", " +
                        " \"description\": \"yeD1mNUM8sX8l\", " +
                        " \"price\": 5000.0, " +
                        " \"subcategory\": { " +
                        " \"subcategoryId\": 0, " +
                        " \"name\": \"_EM_38_XYZ_\" " +
                        " } " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Unable to find hr.algebra.dal.webshop2024dal.Entity.Subcategory with id 0; nested exception is javax.persistence.EntityNotFoundException: Unable to find hr.algebra.dal.webshop2024dal.Entity.Subcategory with id 0"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name", "description", "price")));
    }


    @Test(timeout = 60000)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_53_XYZ_")
                .contentType("application/json")
                .body(" { " +
                        " \"subcategoryId\": 847, " +
                        " \"name\": \"_EM_50_XYZ_\", " +
                        " \"category\": { " +
                        " \"name\": \"_EM_51_XYZ_\" " +
                        " } " +
                        " } ")
                .put(baseUrlOfSut + "/webShopApi/subcategories/847?EMextraParam123=_EM_52_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Subcategory id not found - 847"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name")));
    }


    @Test(timeout = 60000)
    public void test_23() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " +
                        " \"name\": \"_EM_67_XYZ_\" " +
                        " } ")
                .put(baseUrlOfSut + "/webShopApi/categories/588")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Category id not found - 588"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name")));
    }


    @Test(timeout = 60000)
    public void test_24() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SHOPPING_CART", 3182L)
                .and().insertInto("CATEGORIES", 3181L)
                .d("NAME", "\"_EM_20696_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 3180L)
                .d("NAME", "\"ySHRhm6h17\"")
                .r("CATEGORY_ID", 3181L)
                .and().insertInto("PRODUCTS", 3179L)
                .d("NAME", "\"i4QKPb\"")
                .d("PRICE", "-0.6222254")
                .r("SUBCATEGORY_ID", 3180L)
                .and().insertInto("CART_ITEMS", 3178L)
                .d("QUANTITY", "0")
                .r("PRODUCT_ID", 3179L)
                .r("CART_ID", 3182L)
                .and().insertInto("SHOPPING_CART", 3187L)
                .and().insertInto("CATEGORIES", 3186L)
                .d("NAME", "\"_EM_35813_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 3185L)
                .d("NAME", "\"_EM_35814_XYZ_\"")
                .r("CATEGORY_ID", 3186L)
                .and().insertInto("PRODUCTS", 3184L)
                .d("NAME", "\"_EM_18787_XYZ_\"")
                .d("PRICE", "-1187.55")
                .r("SUBCATEGORY_ID", 3185L)
                .and().insertInto("CART_ITEMS", 3183L)
                .d("QUANTITY", "-32136")
                .r("PRODUCT_ID", 3184L)
                .r("CART_ID", 3182L)
                .and().insertInto("SHOPPING_CART", 3192L)
                .and().insertInto("CATEGORIES", 3191L)
                .d("NAME", "\"_EM_35815_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 3190L)
                .d("NAME", "\"_EM_18789_XYZ_\"")
                .r("CATEGORY_ID", 3191L)
                .and().insertInto("PRODUCTS", 3189L)
                .d("NAME", "\"_EM_20699_XYZ_4\"")
                .d("PRICE", "0.0")
                .r("SUBCATEGORY_ID", 3190L)
                .and().insertInto("CART_ITEMS", 3188L)
                .d("QUANTITY", "527135")
                .r("PRODUCT_ID", 3184L)
                .r("CART_ID", 3192L)
                .and().insertInto("SHOPPING_CART", 3197L)
                .and().insertInto("CATEGORIES", 3196L)
                .d("NAME", "\"_EM_20700_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 3195L)
                .d("NAME", "\"_EM_20701_XYZ_\"")
                .r("CATEGORY_ID", 3191L)
                .and().insertInto("PRODUCTS", 3194L)
                .d("NAME", "\"Mv\"")
                .d("PRICE", "0.0")
                .r("SUBCATEGORY_ID", 3195L)
                .and().insertInto("CART_ITEMS", 3193L)
                .d("QUANTITY", "4062")
                .r("PRODUCT_ID", 3184L)
                .r("CART_ID", 3197L)
                .and().insertInto("SHOPPING_CART", 3202L)
                .and().insertInto("CATEGORIES", 3201L)
                .d("NAME", "\"oLLWGnQSVU\"")
                .and().insertInto("SUBCATEGORIES", 3200L)
                .d("NAME", "\"lHupAajWQkkpL\"")
                .r("CATEGORY_ID", 3186L)
                .and().insertInto("PRODUCTS", 3199L)
                .d("NAME", "\"SW6T\"")
                .d("PRICE", "0.69047534")
                .r("SUBCATEGORY_ID", 3185L)
                .and().insertInto("CART_ITEMS", 3198L)
                .d("QUANTITY", "134217906")
                .r("PRODUCT_ID", 3179L)
                .r("CART_ID", 3192L)
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " +
                        " \"name\": \"J9YWpOwU\", " +
                        " \"description\": \"_EM_35812_XYZ_\", " +
                        " \"price\": 5000.0 " +
                        " } ")
                .put(baseUrlOfSut + "/webShopApi/products/661")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Product id not found - 661"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("name", "description", "price")));
    }


}
