package hr.algebra.api.webshop2024api;

import org.junit.*;

import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-07-13T11:31:14.492+02:00[Europe/Belgrade]
 * <br>
 * The generated test suite contains 27 tests
 * <br>
 * Covered targets: 89
 * <br>
 * Used time: 1h 0m 0s
 * <br>
 * Needed budget for current results: 89%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
@Ignore
public class EvoMaster_others_Test {


    private static final SutHandler controller = new hr.algebra.api.webshop2024api.EvoMasterDriver();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
     * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
     */
    private static boolean ems = false;
    /**
     * sco - supported code oracle - checking that the response status code is among those supported according to the schema
     */
    private static boolean sco = false;


    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
                .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
                .redirect(redirectConfig().followRedirects(false));
    }


    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }


    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CATEGORIES","SUBCATEGORIES","PRODUCTS","CART_ITEMS","ORDER_ITEMS","PRODUCT_IMAGE","IMAGE"));
        controller.resetStateOfSUT();
    }




    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "fo")
                .contentType("application/json")
                .body(" { " +
                        " \"productId\": 524427, " +
                        " \"name\": \"_EM_10830_XYZ_\", " +
                        " \"description\": \"PtYz6Uio\", " +
                        " \"price\": 0.9183052070904305, " +
                        " \"subcategory\": { " +
                        " \"subcategoryId\": 2, " +
                        " \"name\": \"_EM_10831_XYZ_\", " +
                        " \"category\": { " +
                        " \"name\": \"3k1an4Gvshmw\" " +
                        " } " +
                        " } " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/products?EMextraParam123=_EM_10833_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .header("X-Requested-With", "fo")
                .contentType("application/json")
                .body(" { " +
                        " \"categoryId\": 449, " +
                        " \"name\": \"_q\" " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/categories")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "YHxbsxe8r0TaU3")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByShoppingCartId/275?EMextraParam123=88yInJ3JkryfrS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "fo")
                .contentType("application/json")
                .body(" { " +
                        " \"name\": \"MAeMNaSLRpU\", " +
                        " \"category\": { " +
                        " \"name\": \"ep2P\" " +
                        " } " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/subcategories?EMextraParam123=_EM_42_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "XXyHiDKHjWwTex")
                .contentType("application/json")
                .body(" { " +
                        " \"categoryId\": 131557, " +
                        " \"name\": \"ThRgYO9USukx0\" " +
                        " } ")
                .put(baseUrlOfSut + "/webShopApi/categories/485?EMextraParam123=_EM_29215_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 123L)
                .d("NAME", "\"_EM_104348_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 122L)
                .d("NAME", "\"_EM_104349_XYZ_\"")
                .r("CATEGORY_ID", 123L)
                .and().insertInto("PRODUCTS", 121L)
                .d("NAME", "\"_EM_104350_XYZ_\"")
                .d("PRICE", "0.77228945")
                .r("SUBCATEGORY_ID", 122L)
                .and().insertInto("IMAGE", 120L)
                .d("IMAGE_URL", "\"_EM_104351_XYZ_\"")
                .and().insertInto("PRODUCT_IMAGE", 119L)
                .r("IMAGE_ID", 120L)
                .r("PRODUCT_ID", 121L)
                .and().insertInto("CATEGORIES", 128L)
                .d("NAME", "\"_EM_104352_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 127L)
                .d("NAME", "\"a6I0FaeC8VfBnJ5Q\"")
                .r("CATEGORY_ID", 123L)
                .and().insertInto("PRODUCTS", 126L)
                .d("NAME", "\"_EM_104353_XYZ_\"")
                .d("PRICE", "0.4662646")
                .r("SUBCATEGORY_ID", 122L)
                .and().insertInto("IMAGE", 125L)
                .d("IMAGE_URL", "\"_EM_104354_XYZ_\"")
                .and().insertInto("PRODUCT_IMAGE", 124L)
                .r("IMAGE_ID", 125L)
                .r("PRODUCT_ID", 121L)
                .and().insertInto("CATEGORIES", 133L)
                .d("NAME", "\"17NU@UIUE\"")
                .and().insertInto("SUBCATEGORIES", 132L)
                .d("NAME", "\"OEVG3qZeVAsw\"")
                .r("CATEGORY_ID", 133L)
                .and().insertInto("PRODUCTS", 131L)
                .d("NAME", "\"4nusdL1nrQJ0e\"")
                .d("PRICE", "-0.18126403")
                .r("SUBCATEGORY_ID", 132L)
                .and().insertInto("IMAGE", 130L)
                .d("IMAGE_URL", "\"D74LLOP5\"")
                .and().insertInto("PRODUCT_IMAGE", 129L)
                .r("IMAGE_ID", 120L)
                .r("PRODUCT_ID", 131L)
                .and().insertInto("CATEGORIES", 138L)
                .d("NAME", "\"n7K8\"")
                .and().insertInto("SUBCATEGORIES", 137L)
                .d("NAME", "\"E_f0SjehfZX\"")
                .r("CATEGORY_ID", 123L)
                .and().insertInto("PRODUCTS", 136L)
                .d("NAME", "\"vZOq3\"")
                .d("PRICE", "0.66233337")
                .r("SUBCATEGORY_ID", 132L)
                .and().insertInto("IMAGE", 135L)
                .d("IMAGE_URL", "\"8d\"")
                .and().insertInto("PRODUCT_IMAGE", 134L)
                .r("IMAGE_ID", 135L)
                .r("PRODUCT_ID", 126L)
                .and().insertInto("CATEGORIES", 143L)
                .d("NAME", "\"FxCHJ\"")
                .and().insertInto("SUBCATEGORIES", 142L)
                .d("NAME", "\"tNT9ceCuKZw3OGYe\"")
                .r("CATEGORY_ID", 133L)
                .and().insertInto("PRODUCTS", 141L)
                .d("NAME", "\"JEFO\"")
                .d("PRICE", "-162896.28")
                .r("SUBCATEGORY_ID", 122L)
                .and().insertInto("IMAGE", 140L)
                .d("IMAGE_URL", "\"TxRveESTGKUpmI\"")
                .and().insertInto("PRODUCT_IMAGE", 139L)
                .r("IMAGE_ID", 125L)
                .r("PRODUCT_ID", 131L)
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByUsername/%5Cd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_14666_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findBySession/%5C8Poh_XQTOlBr_Pe")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "STg02xghRe4C2hj")
                .delete(baseUrlOfSut + "/webShopApi/subcategories/465")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "zjf61W8HqP")
                .get(baseUrlOfSut + "/webShopApi/categories/298")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_9() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 229L)
                .d("NAME", "\"_EM_19252_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 228L)
                .d("NAME", "\"_EM_42519_XYZ_\"")
                .r("CATEGORY_ID", 229L)
                .and().insertInto("PRODUCTS", 227L)
                .d("NAME", "\"_EM_19253_XYZ_\"")
                .d("PRICE", "-0.114075914")
                .r("SUBCATEGORY_ID", 228L)
                .and().insertInto("IMAGE", 226L)
                .d("IMAGE_URL", "\"olnOw\"")
                .and().insertInto("PRODUCT_IMAGE", 225L)
                .r("IMAGE_ID", 226L)
                .r("PRODUCT_ID", 227L)
                .and().insertInto("CATEGORIES", 234L)
                .d("NAME", "\"_EM_42241_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 233L)
                .d("NAME", "\"BDy1DeeVg\"")
                .r("CATEGORY_ID", 229L)
                .and().insertInto("PRODUCTS", 232L)
                .d("NAME", "\"_EM_42520_XYZ_\"")
                .d("PRICE", "1.98")
                .r("SUBCATEGORY_ID", 228L)
                .and().insertInto("IMAGE", 231L)
                .d("IMAGE_URL", "\"3DSvm_E\"")
                .and().insertInto("PRODUCT_IMAGE", 230L)
                .r("IMAGE_ID", 231L)
                .r("PRODUCT_ID", 227L)
                .and().insertInto("CATEGORIES", 239L)
                .d("NAME", "\"_EM_181773_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 238L)
                .d("NAME", "\"mbNGc0\"")
                .r("CATEGORY_ID", 234L)
                .and().insertInto("PRODUCTS", 237L)
                .d("NAME", "\"ACN3di1KtWVEra\"")
                .d("PRICE", "1.9364359")
                .r("SUBCATEGORY_ID", 238L)
                .and().insertInto("IMAGE", 236L)
                .d("IMAGE_URL", "\"nC\"")
                .and().insertInto("PRODUCT_IMAGE", 235L)
                .r("IMAGE_ID", 226L)
                .r("PRODUCT_ID", 232L)
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "kxgOwdI5O_k")
                .get(baseUrlOfSut + "/webShopApi/cartItems/allCartItems")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByUsername/z")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByShoppingCartId/431")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findBySession/_EM_4_XYZ_?EMextraParam123=_EM_5_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/subcategories/494?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/webShopApi/subcategories/186?EMextraParam123=_EM_8_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_13_XYZ_")
                .delete(baseUrlOfSut + "/webShopApi/products/180?EMextraParam123=_EM_12_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/categories/343")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/webShopApi/categories/614")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_21_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/subcategories/allSubcategories?EMextraParam123=_EM_20_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/categories/allCategories?EMextraParam123=_EM_25_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_27_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/cartItems/allCartItems")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_30_XYZ_")
                .contentType("application/json")
                .body(" { " +
                        " \"name\": \"qSlfE5Z3EhOV\" " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/subcategories?EMextraParam123=_EM_29_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " +
                        " \"name\": \"_EM_31_XYZ_\", " +
                        " \"description\": \"_EM_32_XYZ_\", " +
                        " \"price\": 0.7624582909557122 " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/products")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_23() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_40_XYZ_")
                .contentType("application/json")
                .body(" { " +
                        " \"name\": \"_EM_38_XYZ_\" " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/categories")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_24() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_43_XYZ_")
                .contentType("application/json")
                .body(" { " +
                        " \"subcategoryId\": 160966172, " +
                        " \"name\": \"QCguQemZsCHfkI\" " +
                        " } ")
                .put(baseUrlOfSut + "/webShopApi/subcategories/160966172")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_25() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_49_XYZ_")
                .contentType("application/json")
                .body(" { " +
                        " \"productId\": 929, " +
                        " \"name\": \"_EM_44_XYZ_\", " +
                        " \"description\": \"_EM_45_XYZ_\", " +
                        " \"price\": 0.8226705359466258 " +
                        " } ")
                .put(baseUrlOfSut + "/webShopApi/products/929")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_26() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " +
                        " \"name\": \"_EM_56_XYZ_\" " +
                        " } ")
                .put(baseUrlOfSut + "/webShopApi/categories/245")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
