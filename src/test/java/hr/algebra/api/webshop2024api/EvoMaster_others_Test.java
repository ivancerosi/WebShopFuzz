package hr.algebra.api.webshop2024api;

import org.junit.*;

import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;


import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-07-13T13:56:30.405+02:00[Europe/Belgrade]
 * <br>
 * The generated test suite contains 8 tests
 * <br>
 * Covered targets: 22
 * <br>
 * Used time: 1h 0m 1s
 * <br>
 * Needed budget for current results: 92%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {


    private static final SutHandler controller = new hr.algebra.api.webshop2024api.EvoMasterDriver();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
     * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
     */
    private static boolean ems = false;
    /**
     * sco - supported code oracle - checking that the response status code is among those supported according to the schema
     */
    private static boolean sco = false;


    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
                .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
                .redirect(redirectConfig().followRedirects(false));
    }


    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }


    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CATEGORIES","SUBCATEGORIES","PRODUCTS","CART_ITEMS","ORDER_ITEMS","PRODUCT_IMAGE","SHOPPING_CART","IMAGE"));
        controller.resetStateOfSUT();
    }




    @Test(timeout = 60000)
    public void test_0() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SHOPPING_CART", 3182L)
                .and().insertInto("CATEGORIES", 3181L)
                .d("NAME", "\"qu1IdHdpz8DiY2O\"")
                .and().insertInto("SUBCATEGORIES", 3180L)
                .d("NAME", "\"_IMU5UUU0_XYU_\"")
                .r("CATEGORY_ID", 3181L)
                .and().insertInto("PRODUCTS", 3179L)
                .d("NAME", "\"grrPnT\"")
                .d("PRICE", "0.8995945")
                .r("SUBCATEGORY_ID", 3180L)
                .and().insertInto("CART_ITEMS", 3178L)
                .d("QUANTITY", "-7215")
                .r("PRODUCT_ID", 3179L)
                .r("CART_ID", 3182L)
                .and().insertInto("SHOPPING_CART", 3187L)
                .and().insertInto("CATEGORIES", 3186L)
                .d("NAME", "\"OZMVsmp6kqNy\"")
                .and().insertInto("SUBCATEGORIES", 3185L)
                .d("NAME", "\"_EM_19846_XYZ_\"")
                .r("CATEGORY_ID", 3181L)
                .and().insertInto("PRODUCTS", 3184L)
                .d("NAME", "\"_EM_21847_XYZ_\"")
                .d("PRICE", "-1187.55")
                .r("SUBCATEGORY_ID", 3180L)
                .and().insertInto("CART_ITEMS", 3183L)
                .d("QUANTITY", "16777216")
                .r("PRODUCT_ID", 3179L)
                .r("CART_ID", 3187L)
                .and().insertInto("SHOPPING_CART", 3192L)
                .and().insertInto("CATEGORIES", 3191L)
                .d("NAME", "\"_EM_19848_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 3190L)
                .d("NAME", "\"_EM_18789_XYZ_\"")
                .r("CATEGORY_ID", 3181L)
                .and().insertInto("PRODUCTS", 3189L)
                .d("NAME", "\"wMdTBtvC!y\"")
                .d("PRICE", "-2.3379421")
                .r("SUBCATEGORY_ID", 3185L)
                .and().insertInto("CART_ITEMS", 3188L)
                .d("QUANTITY", "0")
                .r("PRODUCT_ID", 3184L)
                .r("CART_ID", 3187L)
                .and().insertInto("SHOPPING_CART", 3197L)
                .and().insertInto("CATEGORIES", 3196L)
                .d("NAME", "\"5CiSmtg\"")
                .and().insertInto("SUBCATEGORIES", 3195L)
                .d("NAME", "\"_EM_21848_XYZ_\"")
                .r("CATEGORY_ID", 3196L)
                .and().insertInto("PRODUCTS", 3194L)
                .d("NAME", "\"X\"")
                .d("PRICE", "0.0")
                .r("SUBCATEGORY_ID", 3195L)
                .and().insertInto("CART_ITEMS", 3193L)
                .d("QUANTITY", "0")
                .r("PRODUCT_ID", 3189L)
                .r("CART_ID", 3192L)
                .and().insertInto("SHOPPING_CART", 3202L)
                .and().insertInto("CATEGORIES", 3201L)
                .d("NAME", "\"_EM_21849_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 3200L)
                .d("NAME", "\"kAD63H_I2\"")
                .r("CATEGORY_ID", 3186L)
                .and().insertInto("PRODUCTS", 3199L)
                .d("NAME", "\"_EM_19850_XYZ_\"")
                .d("PRICE", "0.69047534")
                .r("SUBCATEGORY_ID", 3190L)
                .and().insertInto("CART_ITEMS", 3198L)
                .d("QUANTITY", "426")
                .r("PRODUCT_ID", 3194L)
                .r("CART_ID", 3202L)
                .and().insertInto("SHOPPING_CART", 7217L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"D13us9X_\"")
                .and().insertInto("SHOPPING_CART", 7218L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"5qt3I\"")
                .and().insertInto("SHOPPING_CART", 7219L)
                .d("SESSION_ID", "\"J7VSso2idJDBk\"")
                .d("USERNAME", "NULL")
                .and().insertInto("SHOPPING_CART", 7220L)
                .d("SESSION_ID", "\"5UhXm5qkB\"")
                .d("USERNAME", "\"5ev7\"")
                .and().insertInto("SHOPPING_CART", 2547L)
                .d("SESSION_ID", "\"G[QoY1UUgE\\\"")
                .d("USERNAME", "\"zNUXtGHn\"")
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findBySession/G%5BQoY1UUgE%5C?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_1() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SHOPPING_CART", 3182L)
                .and().insertInto("CATEGORIES", 3181L)
                .d("NAME", "\"qu1IdHdpz8DiY2O\"")
                .and().insertInto("SUBCATEGORIES", 3180L)
                .d("NAME", "\"_IMU5UUU0_XYU_\"")
                .r("CATEGORY_ID", 3181L)
                .and().insertInto("PRODUCTS", 3179L)
                .d("NAME", "\"grrPnT\"")
                .d("PRICE", "0.8995945")
                .r("SUBCATEGORY_ID", 3180L)
                .and().insertInto("CART_ITEMS", 3178L)
                .d("QUANTITY", "-7215")
                .r("PRODUCT_ID", 3179L)
                .r("CART_ID", 3182L)
                .and().insertInto("SHOPPING_CART", 3187L)
                .and().insertInto("CATEGORIES", 3186L)
                .d("NAME", "\"_EM_109639_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 3185L)
                .d("NAME", "\"luBcFo2rm2mxQG\"")
                .r("CATEGORY_ID", 3181L)
                .and().insertInto("PRODUCTS", 3184L)
                .d("NAME", "\"_EM_218<U_XYZ_\"")
                .d("PRICE", "-1187.55")
                .r("SUBCATEGORY_ID", 3180L)
                .and().insertInto("CART_ITEMS", 3183L)
                .d("QUANTITY", "16777216")
                .r("PRODUCT_ID", 3179L)
                .r("CART_ID", 3182L)
                .and().insertInto("SHOPPING_CART", 3192L)
                .and().insertInto("CATEGORIES", 3191L)
                .d("NAME", "\"_EM_19848_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 3190L)
                .d("NAME", "\"uXek2MQ\"")
                .r("CATEGORY_ID", 3191L)
                .and().insertInto("PRODUCTS", 3189L)
                .d("NAME", "\"wMdTBtvC!y\"")
                .d("PRICE", "-2.3379421")
                .r("SUBCATEGORY_ID", 3185L)
                .and().insertInto("CART_ITEMS", 3188L)
                .d("QUANTITY", "0")
                .r("PRODUCT_ID", 3179L)
                .r("CART_ID", 3187L)
                .and().insertInto("SHOPPING_CART", 3197L)
                .and().insertInto("CATEGORIES", 3196L)
                .d("NAME", "\"5CiSmtg\"")
                .and().insertInto("SUBCATEGORIES", 3195L)
                .d("NAME", "\"_EM_109640_XYZ_\"")
                .r("CATEGORY_ID", 3186L)
                .and().insertInto("PRODUCTS", 3194L)
                .d("NAME", "\"X\"")
                .d("PRICE", "0.0")
                .r("SUBCATEGORY_ID", 3180L)
                .and().insertInto("CART_ITEMS", 3193L)
                .d("QUANTITY", "0")
                .r("PRODUCT_ID", 3189L)
                .r("CART_ID", 3192L)
                .and().insertInto("SHOPPING_CART", 3202L)
                .and().insertInto("CATEGORIES", 3201L)
                .d("NAME", "\"OOlk1WvDNuPy8M5\"")
                .and().insertInto("SUBCATEGORIES", 3200L)
                .d("NAME", "\"kAD63H_I2\"")
                .r("CATEGORY_ID", 3181L)
                .and().insertInto("PRODUCTS", 3199L)
                .d("NAME", "\"_EM_19850_XYZ_\"")
                .d("PRICE", "0.69047534")
                .r("SUBCATEGORY_ID", 3190L)
                .and().insertInto("CART_ITEMS", 3198L)
                .d("QUANTITY", "426")
                .r("PRODUCT_ID", 3199L)
                .r("CART_ID", 3202L)
                .and().insertInto("SHOPPING_CART", 7217L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"D13us9X_\"")
                .and().insertInto("SHOPPING_CART", 7218L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"_EM_109641_XYZ_\"")
                .and().insertInto("SHOPPING_CART", 7219L)
                .d("SESSION_ID", "\"_EM_109642_XYZ_\"")
                .d("USERNAME", "NULL")
                .and().insertInto("SHOPPING_CART", 7220L)
                .d("SESSION_ID", "\"5UhXm5qkB\"")
                .d("USERNAME", "\"5ev7J\"")
                .and().insertInto("CATEGORIES", 15420L)
                .d("NAME", "\"PPOhqcUd\"")
                .and().insertInto("SUBCATEGORIES", 15419L)
                .d("NAME", "\"r\"")
                .r("CATEGORY_ID", 3191L)
                .and().insertInto("PRODUCTS", 15418L)
                .d("NAME", "\"_EM_109643_XYZ_\"")
                .d("PRICE", "0.17462514")
                .r("SUBCATEGORY_ID", 3185L)
                .and().insertInto("IMAGE", 15417L)
                .d("IMAGE_URL", "\"w\"")
                .and().insertInto("PRODUCT_IMAGE", 15416L)
                .r("IMAGE_ID", 15417L)
                .r("PRODUCT_ID", 3189L)
                .and().insertInto("CATEGORIES", 15425L)
                .d("NAME", "\"Lh\"")
                .and().insertInto("SUBCATEGORIES", 15424L)
                .d("NAME", "\"vexQQu_ogcqsRjq\"")
                .r("CATEGORY_ID", 3186L)
                .and().insertInto("PRODUCTS", 15423L)
                .d("NAME", "\"kywwlYN_d\"")
                .d("PRICE", "-0.9098988")
                .r("SUBCATEGORY_ID", 3180L)
                .and().insertInto("IMAGE", 15422L)
                .d("IMAGE_URL", "\"P2QESgxG0NT\"")
                .and().insertInto("PRODUCT_IMAGE", 15421L)
                .r("IMAGE_ID", 15417L)
                .r("PRODUCT_ID", 3189L)
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByUsername/zNU%5CtGHn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_57084_XYZ_")
                .contentType("application/json")
                .body(" { " +
                        " \"name\": \"\", " +
                        " \"category\": { " +
                        " \"categoryId\": 397, " +
                        " \"name\": \"_EM_57082_XYZ_\" " +
                        " } " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/subcategories")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Validation failed"))
                .body("'errors'.'name'", containsString("Subcategory name is required!"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_41_XYZ_")
                .contentType("application/json")
                .body(" { " +
                        " \"name\": \"_EM_36_XYZ_\", " +
                        " \"description\": \"_EM_37_XYZ_\", " +
                        " \"price\": 0.4465995543686514 " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/products?EMextraParam123=_EM_40_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Validation failed"))
                .body("'errors'.'price'", containsString("Price must not exceed 6 digits in the integer part and 2 digits in the fraction part"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_4() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 80L)
                .d("NAME", "\"_EM_9964_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 79L)
                .d("NAME", "\"_EM_9965_XYZ_\"")
                .r("CATEGORY_ID", 80L)
                .and().insertInto("CATEGORIES", 82L)
                .d("NAME", "\"kfsRPv8evPvm0j\"")
                .and().insertInto("SUBCATEGORIES", 81L)
                .d("NAME", "\"_EM_9966_XYZ_\"")
                .r("CATEGORY_ID", 80L)
                .and().insertInto("CATEGORIES", 84L)
                .d("NAME", "\"QVY7zG\"")
                .and().insertInto("SUBCATEGORIES", 83L)
                .d("NAME", "\"_EM_9967_XYZ_\"")
                .r("CATEGORY_ID", 84L)
                .and().insertInto("CATEGORIES", 86L)
                .d("NAME", "\"_EM_9968_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 85L)
                .d("NAME", "\"JsPwRW3H\"")
                .r("CATEGORY_ID", 86L)
                .and().insertInto("CATEGORIES", 88L)
                .d("NAME", "\"_EM_9969_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 87L)
                .d("NAME", "\"_EM_9970_XYZ_\"")
                .r("CATEGORY_ID", 84L)
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " +
                        " \"name\": \"\" " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/categories?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Validation failed"))
                .body("'errors'.'name'", containsString("Category name is required"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 543L)
                .d("NAME", "\"_EM_9477_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 542L)
                .d("NAME", "\"AKY\"")
                .r("CATEGORY_ID", 543L)
                .and().insertInto("CATEGORIES", 545L)
                .d("NAME", "\"30FGFQhkG4\"")
                .and().insertInto("SUBCATEGORIES", 544L)
                .d("NAME", "\"2CxD8xXMOabZee8\"")
                .r("CATEGORY_ID", 543L)
                .and().insertInto("CATEGORIES", 547L)
                .d("NAME", "\"6\"")
                .and().insertInto("SUBCATEGORIES", 546L)
                .d("NAME", "\"ourXjb\"")
                .r("CATEGORY_ID", 543L)
                .and().insertInto("CATEGORIES", 549L)
                .d("NAME", "\"_EM_9478_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 548L)
                .d("NAME", "\"\"")
                .r("CATEGORY_ID", 549L)
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " +
                        " \"subcategoryId\": 1828542321, " +
                        " \"name\": \"\" " +
                        " } ")
                .put(baseUrlOfSut + "/webShopApi/subcategories/1828542321")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Validation failed"))
                .body("'errors'.'name'", containsString("Subcategory name is required!"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_59_XYZ_")
                .contentType("application/json")
                .body(" { " +
                        " \"name\": \"_EM_54_XYZ_\", " +
                        " \"description\": \"_EM_55_XYZ_\", " +
                        " \"price\": 0.5142363560914943, " +
                        " \"subcategory\": { " +
                        " \"subcategoryId\": -3416652351780022748, " +
                        " \"name\": \"_EM_56_XYZ_\" " +
                        " } " +
                        " } ")
                .put(baseUrlOfSut + "/webShopApi/products/66")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Validation failed"))
                .body("'errors'.'price'", containsString("Price must not exceed 6 digits in the integer part and 2 digits in the fraction part"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " +
                        " \"name\": \"\" " +
                        " } ")
                .put(baseUrlOfSut + "/webShopApi/categories/221")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Validation failed"))
                .body("'errors'.'name'", containsString("Category name is required"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
