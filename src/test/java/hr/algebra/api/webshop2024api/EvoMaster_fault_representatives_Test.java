package hr.algebra.api.webshop2024api;
import org.junit.*;

import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;



import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-07-13T13:56:30.411+02:00[Europe/Belgrade]
 * <br>
 * The generated test suite contains 4 tests
 * <br>
 * Covered targets: 14
 * <br>
 * Used time: 1h 0m 1s
 * <br>
 * Needed budget for current results: 92%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {


    private static final SutHandler controller = new hr.algebra.api.webshop2024api.EvoMasterDriver();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
     * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
     */
    private static boolean ems = false;
    /**
     * sco - supported code oracle - checking that the response status code is among those supported according to the schema
     */
    private static boolean sco = false;
    /**
     * rso - response structure oracle - checking that the response objects match the responses defined in the schema
     */
    private static boolean rso = false;


    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
                .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
                .redirect(redirectConfig().followRedirects(false));
    }


    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }


    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("SHOPPING_CART","CART_ITEMS","CATEGORIES","SUBCATEGORIES","PRODUCTS","ORDER_ITEMS","PRODUCT_IMAGE","IMAGE","USERS","AUTHORITIES","NOTIFICATIONS"));
        controller.resetStateOfSUT();
    }




    /**
     * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options.
     * ErrorText_0
     * LastLine_0
     */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SHOPPING_CART", 416L)
                .and().insertInto("CATEGORIES", 415L)
                .d("NAME", "\"CREATE SEQUENCE \"PUBLIC\".\"SYSTEM_SEQUENCE_6EFB3766_9255_4DF7_8EAC_B7CCC7DDB8D6\" START WITH 1 RESTART WITH 33 BELONGS_TO_TABLE\"")
                .and().insertInto("SUBCATEGORIES", 414L)
                .d("NAME", "\"_EM_42120_XYZ_\"")
                .r("CATEGORY_ID", 415L)
                .and().insertInto("PRODUCTS", 413L)
                .d("NAME", "\"_EM_5667_XYZ_\"")
                .d("PRICE", "0.0")
                .r("SUBCATEGORY_ID", 414L)
                .and().insertInto("CART_ITEMS", 412L)
                .d("QUANTITY", "524471")
                .r("PRODUCT_ID", 413L)
                .r("CART_ID", 416L)
                .and().insertInto("SHOPPING_CART", 421L)
                .and().insertInto("CATEGORIES", 420L)
                .d("NAME", "\"_EM_42121_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 419L)
                .d("NAME", "\"_EM_42122_XYZ_\"")
                .r("CATEGORY_ID", 415L)
                .and().insertInto("PRODUCTS", 418L)
                .d("NAME", "\"_EM_5669_XYZ_\"")
                .d("PRICE", "0.67671776")
                .r("SUBCATEGORY_ID", 419L)
                .and().insertInto("CART_ITEMS", 417L)
                .d("QUANTITY", "68")
                .r("PRODUCT_ID", 418L)
                .r("CART_ID", 421L)
                .and().insertInto("SHOPPING_CART", 426L)
                .and().insertInto("CATEGORIES", 425L)
                .d("NAME", "\"_EM_42123_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 424L)
                .d("NAME", "\"6IS7tP\"")
                .r("CATEGORY_ID", 415L)
                .and().insertInto("PRODUCTS", 423L)
                .d("NAME", "\"C\"")
                .d("PRICE", "-24.128529")
                .r("SUBCATEGORY_ID", 424L)
                .and().insertInto("CART_ITEMS", 422L)
                .d("QUANTITY", "674")
                .r("PRODUCT_ID", 423L)
                .r("CART_ID", 416L)
                .and().insertInto("CATEGORIES", 10633L)
                .d("NAME", "\"_EM_42124_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 10632L)
                .d("NAME", "\"mxw\"")
                .r("CATEGORY_ID", 425L)
                .and().insertInto("PRODUCTS", 10631L)
                .d("NAME", "\"_EM_42125_XYZ_\"")
                .d("PRICE", "0.2595954")
                .r("SUBCATEGORY_ID", 10632L)
                .and().insertInto("IMAGE", 10630L)
                .d("IMAGE_URL", "\"_EM_42126_XYZ_\"")
                .and().insertInto("PRODUCT_IMAGE", 10629L)
                .r("IMAGE_ID", 10630L)
                .r("PRODUCT_ID", 418L)
                .and().insertInto("CATEGORIES", 10638L)
                .d("NAME", "\"_EM_42127_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 10637L)
                .d("NAME", "\"IjOd\"")
                .r("CATEGORY_ID", 420L)
                .and().insertInto("PRODUCTS", 10636L)
                .d("NAME", "\"6GO0A51KgH\"")
                .d("PRICE", "0.6012781")
                .r("SUBCATEGORY_ID", 419L)
                .and().insertInto("IMAGE", 10635L)
                .d("IMAGE_URL", "\"_EM_42128_XYZ_\"")
                .and().insertInto("PRODUCT_IMAGE", 10634L)
                .r("IMAGE_ID", 10635L)
                .r("PRODUCT_ID", 413L)
                .and().insertInto("SHOPPING_CART", 410L)
                .d("SESSION_ID", "\"rUQT47K\"")
                .d("USERNAME", "\";SkG03d\"")
                .and().insertInto("USERS", 411L)
                .d("USERNAME", "\"_EM_705_XYZ_\"")
                .d("EMAIL", "\"_EM_706_XYZ_\"")
                .d("ENABLED", "true")
                .d("PASSWORD", "\"_EM_707_XYZ_\"")
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByUsername/;SkG03d?EMextraParam123=_EM_708_XYZ_")
                .then()
                .statusCode(500) // framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("An unexpected error has occurred"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    /**
     * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options.
     * ErrorText_0
     * LastLine_0
     */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SHOPPING_CART", 3182L)
                .and().insertInto("CATEGORIES", 3181L)
                .d("NAME", "\"4qgp4IMAL\"")
                .and().insertInto("SUBCATEGORIES", 3180L)
                .d("NAME", "\"_EM_113237_XYZ_\"")
                .r("CATEGORY_ID", 3181L)
                .and().insertInto("PRODUCTS", 3179L)
                .d("NAME", "\"_EM_18786_XYZ_\"")
                .d("PRICE", "0.8995945")
                .r("SUBCATEGORY_ID", 3180L)
                .and().insertInto("CART_ITEMS", 3178L)
                .d("QUANTITY", "977")
                .r("PRODUCT_ID", 3179L)
                .r("CART_ID", 3182L)
                .and().insertInto("SHOPPING_CART", 3187L)
                .and().insertInto("CATEGORIES", 3186L)
                .d("NAME", "\"_EM_113238_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 3185L)
                .d("NAME", "\"_EM_113239_XYZ_\"")
                .r("CATEGORY_ID", 3181L)
                .and().insertInto("PRODUCTS", 3184L)
                .d("NAME", "\"F08MILgXzawYh9mE\"")
                .d("PRICE", "0.0")
                .r("SUBCATEGORY_ID", 3180L)
                .and().insertInto("CART_ITEMS", 3183L)
                .d("QUANTITY", "33400")
                .r("PRODUCT_ID", 3179L)
                .r("CART_ID", 3187L)
                .and().insertInto("SHOPPING_CART", 3192L)
                .and().insertInto("CATEGORIES", 3191L)
                .d("NAME", "\"_EM_18788_XYZ_\"")
                .and().insertInto("SUBCATEGORIES", 3190L)
                .d("NAME", "\"_EM_113240_XYZ_\"")
                .r("CATEGORY_ID", 3191L)
                .and().insertInto("PRODUCTS", 3189L)
                .d("NAME", "\"wMdTBtvC1y\"")
                .d("PRICE", "0.85191333")
                .r("SUBCATEGORY_ID", 3180L)
                .and().insertInto("CART_ITEMS", 3188L)
                .d("QUANTITY", "799")
                .r("PRODUCT_ID", 3179L)
                .r("CART_ID", 3192L)
                .and().insertInto("SHOPPING_CART", 3197L)
                .and().insertInto("CATEGORIES", 3196L)
                .d("NAME", "\"g8B7\"")
                .and().insertInto("SUBCATEGORIES", 3195L)
                .d("NAME", "\"ROriyFII\"")
                .r("CATEGORY_ID", 3196L)
                .and().insertInto("PRODUCTS", 3194L)
                .d("NAME", "\"_EM_18790_XYZ_\"")
                .d("PRICE", "0.11725574")
                .r("SUBCATEGORY_ID", 3185L)
                .and().insertInto("CART_ITEMS", 3193L)
                .d("QUANTITY", "3038")
                .r("PRODUCT_ID", 3189L)
                .r("CART_ID", 3192L)
                .and().insertInto("SHOPPING_CART", 3202L)
                .and().insertInto("CATEGORIES", 3201L)
                .d("NAME", "\"oLLWGnQSVU\"")
                .and().insertInto("SUBCATEGORIES", 3200L)
                .d("NAME", "\"dzBBfFnDwPsl6VCz\"")
                .r("CATEGORY_ID", 3201L)
                .and().insertInto("PRODUCTS", 3199L)
                .d("NAME", "\"5Sr\"")
                .d("PRICE", "0.69047534")
                .r("SUBCATEGORY_ID", 3180L)
                .and().insertInto("CART_ITEMS", 3198L)
                .d("QUANTITY", "178")
                .r("PRODUCT_ID", 3184L)
                .r("CART_ID", 3202L)
                .and().insertInto("CATEGORIES", 25053L)
                .d("NAME", "\"pe1qPhp9E\"")
                .and().insertInto("SUBCATEGORIES", 25052L)
                .d("NAME", "\"gVIIgompTmHosqwD\"")
                .r("CATEGORY_ID", 3196L)
                .and().insertInto("PRODUCTS", 25051L)
                .d("NAME", "\"oq\"")
                .d("PRICE", "0.4026864")
                .r("SUBCATEGORY_ID", 3200L)
                .and().insertInto("IMAGE", 25050L)
                .d("IMAGE_URL", "\"\"")
                .and().insertInto("PRODUCT_IMAGE", 25049L)
                .r("IMAGE_ID", 25050L)
                .r("PRODUCT_ID", 3194L)
                .and().insertInto("CATEGORIES", 25058L)
                .d("NAME", "\"\"")
                .and().insertInto("SUBCATEGORIES", 25057L)
                .d("NAME", "\"H7Ld1\"")
                .r("CATEGORY_ID", 3201L)
                .and().insertInto("PRODUCTS", 25056L)
                .d("NAME", "\"E8R3qX\"")
                .d("PRICE", "0.7137006")
                .r("SUBCATEGORY_ID", 3200L)
                .and().insertInto("IMAGE", 25055L)
                .d("IMAGE_URL", "\"jJE7hrp\"")
                .and().insertInto("PRODUCT_IMAGE", 25054L)
                .r("IMAGE_ID", 25050L)
                .r("PRODUCT_ID", 25051L)
                .and().insertInto("CATEGORIES", 25063L)
                .d("NAME", "\"CnDGH6q8\"")
                .and().insertInto("SUBCATEGORIES", 25062L)
                .d("NAME", "\"UHCBN6tqkVv5GETd\"")
                .r("CATEGORY_ID", 25058L)
                .and().insertInto("PRODUCTS", 25061L)
                .d("NAME", "\"\"")
                .d("PRICE", "0.056281008")
                .r("SUBCATEGORY_ID", 3180L)
                .and().insertInto("IMAGE", 25060L)
                .d("IMAGE_URL", "\"3CGqixFL\"")
                .and().insertInto("PRODUCT_IMAGE", 25059L)
                .r("IMAGE_ID", 25060L)
                .r("PRODUCT_ID", 25051L)
                .and().insertInto("CATEGORIES", 25068L)
                .d("NAME", "\"Xae71_fc7hH\"")
                .and().insertInto("SUBCATEGORIES", 25067L)
                .d("NAME", "\"\"")
                .r("CATEGORY_ID", 3201L)
                .and().insertInto("PRODUCTS", 25066L)
                .d("NAME", "\"eVpp2eeN4\"")
                .d("PRICE", "0.067677535")
                .r("SUBCATEGORY_ID", 3185L)
                .and().insertInto("IMAGE", 25065L)
                .d("IMAGE_URL", "\"vkNVksQ\"")
                .and().insertInto("PRODUCT_IMAGE", 25064L)
                .r("IMAGE_ID", 25055L)
                .r("PRODUCT_ID", 3184L)
                .and().insertInto("CATEGORIES", 25073L)
                .d("NAME", "\"Yj5alt\"")
                .and().insertInto("SUBCATEGORIES", 25072L)
                .d("NAME", "\"Jjsd20jhY\"")
                .r("CATEGORY_ID", 25068L)
                .and().insertInto("PRODUCTS", 25071L)
                .d("NAME", "\"sgfhuhquxN\"")
                .d("PRICE", "0.35202745")
                .r("SUBCATEGORY_ID", 3180L)
                .and().insertInto("IMAGE", 25070L)
                .d("IMAGE_URL", "\"rIndyasXRSEVv\"")
                .and().insertInto("PRODUCT_IMAGE", 25069L)
                .r("IMAGE_ID", 25070L)
                .r("PRODUCT_ID", 3179L)
                .and().insertInto("SHOPPING_CART", 25613L)
                .d("SESSION_ID", "NULL")
                .d("USERNAME", "\"eZDSH5w2k\"")
                .and().insertInto("SHOPPING_CART", 25614L)
                .d("SESSION_ID", "\"UHUjm\"")
                .d("USERNAME", "\"jpDhM4OEz1wp\"")
                .and().insertInto("SHOPPING_CART", 25615L)
                .d("SESSION_ID", "\"NtbJMTdAOIPdg0l\"")
                .d("USERNAME", "\"WHe7\"")
                .and().insertInto("SHOPPING_CART", 25616L)
                .d("SESSION_ID", "\"qXR4eRBiYpO0dj_D\"")
                .d("USERNAME", "\"PDaVq\"")
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findBySession/WaKNbYZ;")
                .then()
                .statusCode(500) // framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("An unexpected error has occurred"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByUsername/_EM_0_XYZ_?EMextraParam123=_EM_1_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("Shopping cart not found for user: _EM_0_XYZ_"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList("quantity")));
    }


    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_57084_XYZ_")
                .contentType("application/json")
                .body(" { " +
                        " \"name\": \"\", " +
                        " \"category\": { " +
                        " \"categoryId\": 397, " +
                        " \"name\": \"_EM_57082_XYZ_\" " +
                        " } " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/subcategories")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Validation failed"))
                .body("'errors'.'name'", containsString("Subcategory name is required!"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
