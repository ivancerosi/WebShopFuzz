package hr.algebra.api.webshop2024api;
import org.junit.*;

import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-07-13T11:31:14.500+02:00[Europe/Belgrade]
 * <br>
 * The generated test suite contains 4 tests
 * <br>
 * Covered targets: 222
 * <br>
 * Used time: 1h 0m 0s
 * <br>
 * Needed budget for current results: 89%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
@Ignore
public class EvoMaster_fault_representatives_Test {


    private static final SutHandler controller = new hr.algebra.api.webshop2024api.EvoMasterDriver();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
     * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
     */
    private static boolean ems = false;
    /**
     * sco - supported code oracle - checking that the response status code is among those supported according to the schema
     */
    private static boolean sco = false;
    /**
     * rso - response structure oracle - checking that the response objects match the responses defined in the schema
     */
    private static boolean rso = false;


    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
                .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
                .redirect(redirectConfig().followRedirects(false));
    }


    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }


    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CATEGORIES","SUBCATEGORIES","PRODUCTS","CART_ITEMS","ORDER_ITEMS","PRODUCT_IMAGE","IMAGE"));
        controller.resetStateOfSUT();
    }




    /**
     * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options.
     * ErrorText_0
     * LastLine_0
     */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_21688_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findBySession/8e;ZrE6hSZpY?EMextraParam123=_EM_5_XYZ_")
                .then()
                .statusCode(500) // hr/algebra/api/webshop2024api/CustomResponseErrors/ErrorResponse_16_getPath
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("An unexpected error has occurred"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    /**
     * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options.
     * ErrorText_0
     * LastLine_0
     */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CATEGORIES", 57678L)
                .d("NAME", "\"X5kKfNb\"")
                .and().insertInto("SUBCATEGORIES", 57677L)
                .d("NAME", "\"0ubManx_\"")
                .r("CATEGORY_ID", 57678L)
                .and().insertInto("PRODUCTS", 57676L)
                .d("NAME", "\"znFr0FQ_54\"")
                .d("PRICE", "0.91229314")
                .r("SUBCATEGORY_ID", 57677L)
                .and().insertInto("IMAGE", 57675L)
                .d("IMAGE_URL", "\"OA\"")
                .and().insertInto("PRODUCT_IMAGE", 57674L)
                .r("IMAGE_ID", 57675L)
                .r("PRODUCT_ID", 57676L)
                .and().insertInto("CATEGORIES", 57683L)
                .d("NAME", "\"Vj3L1WLJ\"")
                .and().insertInto("SUBCATEGORIES", 57682L)
                .d("NAME", "\"ULZAzZD7Qj2w\"")
                .r("CATEGORY_ID", 57683L)
                .and().insertInto("PRODUCTS", 57681L)
                .d("NAME", "\"MfbevJ\"")
                .d("PRICE", "0.0")
                .r("SUBCATEGORY_ID", 57682L)
                .and().insertInto("IMAGE", 57680L)
                .d("IMAGE_URL", "\"hqoIBdBE1Cnopz_\"")
                .and().insertInto("PRODUCT_IMAGE", 57679L)
                .r("IMAGE_ID", 57680L)
                .r("PRODUCT_ID", 57676L)
                .and().insertInto("CATEGORIES", 57688L)
                .d("NAME", "\"uumySN6oRmU\"")
                .and().insertInto("SUBCATEGORIES", 57687L)
                .d("NAME", "\"_EM_222737_XYZ_\"")
                .r("CATEGORY_ID", 57683L)
                .and().insertInto("PRODUCTS", 57686L)
                .d("NAME", "\"GtvsMti0UUUKdFU8\"")
                .d("PRICE", "0.23196907")
                .r("SUBCATEGORY_ID", 57682L)
                .and().insertInto("IMAGE", 57685L)
                .d("IMAGE_URL", "\"RAFPr\"")
                .and().insertInto("PRODUCT_IMAGE", 57684L)
                .r("IMAGE_ID", 57680L)
                .r("PRODUCT_ID", 57686L)
                .and().insertInto("CATEGORIES", 57693L)
                .d("NAME", "\"ifsHpzAJcZj\"")
                .and().insertInto("SUBCATEGORIES", 57692L)
                .d("NAME", "\"qglcGKJ9Ai6XVdO\"")
                .r("CATEGORY_ID", 57693L)
                .and().insertInto("PRODUCTS", 57691L)
                .d("NAME", "\"jK\"")
                .d("PRICE", "0.052815583")
                .r("SUBCATEGORY_ID", 57682L)
                .and().insertInto("IMAGE", 57690L)
                .d("IMAGE_URL", "\"A1oW2FNaifsICR\"")
                .and().insertInto("PRODUCT_IMAGE", 57689L)
                .r("IMAGE_ID", 57690L)
                .r("PRODUCT_ID", 57686L)
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "oEqMs8A8kT3wZjZ")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByUsername/q1A5C3X;zUqj")
                .then()
                .statusCode(500) // hr/algebra/api/webshop2024api/CustomResponseErrors/ErrorResponse_16_getPath
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("An unexpected error has occurred"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " +
                        " \"productImageId\": 442, " +
                        " \"product\": { " +
                        " \"productId\": 795, " +
                        " \"name\": \"_EM_79_XYZ_\", " +
                        " \"description\": \"1NHGRX_zT36O\", " +
                        " \"price\": 0.5431222115944523, " +
                        " \"subcategory\": { " +
                        " \"name\": \"_EM_80_XYZ_\", " +
                        " \"category\": { " +
                        " \"categoryId\": 903, " +
                        " \"name\": \"_EM_81_XYZ_\" " +
                        " } " +
                        " } " +
                        " }, " +
                        " \"image\": { " +
                        " \"imageUrl\": \"_EM_82_XYZ_\" " +
                        " } " +
                        " } ")
                .post(baseUrlOfSut + "/webShopApi/productImages?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Unable to find hr.algebra.dal.webshop2024dal.Entity.Product with id 795; nested exception is javax.persistence.EntityNotFoundException: Unable to find hr.algebra.dal.webshop2024dal.Entity.Product with id 795"))
                .body("'path'", containsString(""));

        expectationHandler.expect(ems)
                .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }


    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1_XYZ_")
                .get(baseUrlOfSut + "/webShopApi/cartItems/findByUsername/z")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("You are not authorized!"))
                .body("'path'", containsString("/error"));

        expectationHandler.expect(ems)
                .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
